# vim: ft=zsh
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}

key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}
key[BckSpce]=${terminfo[kbs]}
key[ShftTab]=${terminfo[kcbt]}
# TODO See if the following can be grabbed from terminfo
# Control + cursor
key[CLeft]="^[[1;5D"
key[CRight]="^[[1;5C"
# Control + Shift + cursor
key[CLEFT]="^[[1;6D"
key[CRIGHT]="^[[1;6C"

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey "${key[Right]}"   forward-char
[[ -n "${key[BckSpce]}" ]]  && bindkey "^[${key[BckSpce]}" bash-backward-delete-word
[[ -n "${key[ShftTab]}" ]]  && bindkey "${key[ShftTab]}" bash-backward-delete-word
[[ -n "${key[CLeft]}"   ]]  && bindkey "${key[CLeft]}"   backward-word
[[ -n "${key[CRight]}"  ]]  && bindkey "${key[CRight]}"  forward-word
# Nice to jump within a long path
[[ -n "${key[CLEFT]}"   ]]  && bindkey "${key[CLEFT]}"   vi-backward-word
[[ -n "${key[CRIGHT]}"  ]]  && bindkey "${key[CRIGHT]}"  vi-forward-word

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

# Bind prepend-sudo function to Alt-S, see S30_functions
bindkey "^[s" prepend-sudo
